# This workflow will install Python dependencies,
# run tests with a variety of Python versions,
# and upload a new build to PyPI on master branch.
# 
# For more information see:
# https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: iplib3 CI

on: [ push, pull_request ]

jobs:

  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # python-version: [3.6, 3.7, 3.8, 3.9]
        os: [macos-latest, ubuntu-latest, windows-latest]
        tox-env: [
          py36,
          py37,
          py38,
          py39,
          # pypy3
        ]
        include:
          - tox-env: py36
            python-version: 3.6
          - tox-env: py37
            python-version: 3.7
          - tox-env: py38
            python-version: 3.8
          - tox-env: py39
            python-version: 3.9
        #   - tox-env: pypy3
        #     python-version: pypy3

        # exclude:
        #   - os: windows-latest
        #     tox-env: pypy3
        #   - os: macos-latest
        #     tox-env: pypy3
    env:
      TOXENV: ${{ matrix.tox-env }}

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2.2.1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: Gr1N/setup-poetry@v4

    - name: Install library and dependencies
      run: |
        python -m pip install --upgrade pip
        poetry install
        poetry run python -m pip install tox tox-gh-actions
        
    - name: Install dependencies (Linux / Mac OS)
      if: ${{ startsWith(matrix.os, 'windows') == false }}
      run: |
        if [ -f requirements.txt ];
        then poetry run python3 -m pip install -r requirements.txt;
        fi

    - name: Install dependencies (Windows)
      if: ${{ startsWith(matrix.os, 'windows') == true }}
      run: |
        if(Test-Path -Path requirements.txt) {
          poetry run python -m pip install -r requirements.txt
        }

    - name: Run Tox (Pytest + Coverage)
      run: |
        poetry run tox
        ls -l ./tests/reports/coverage-html
      
      # cat ./tests/reports/coverage.xml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Results to CodeCov
      if: success()
      uses: codecov/codecov-action@v1.5.2
      with:
        env_vars: TOXENV
        fail_ci_if_error: false
        files: ./tests/reports/coverage-html/index.html,./tests/reports/coverage.xml
        flags: unittests
        name: ${{ matrix.os }}-${{ matrix.tox-env }}
        path_to_write_report: ./tests/reports/codecov_report.txt
        token: ${{ secrets.CODECOV_TOKEN }}

        
  build-n-publish:
    name: Build and publish Python üêç distributions üì¶ to PyPI and TestPyPI
    runs-on: ubuntu-latest
    if: endsWith(github.ref, 'master') # TODO: Find a permanent solution

    steps:
    - uses: actions/checkout@master
    
    - name: Publish distribution üì¶ to Test PyPI
      uses: JRubics/poetry-publish@v1.7
      with:
        ignore_dev_requirements: "yes"
        pypi_token: ${{ secrets.TEST_PYPI_PASSWORD }}
        repository_name: 'testpypi'
        repository_url: 'https://test.pypi.org/legacy/'

    - name: Publish distribution üì¶ to PyPI
      uses: JRubics/poetry-publish@v1.7
      with:
        pypi_token: ${{ secrets.PYPI_PASSWORD }}
        ignore_dev_requirements: "yes"
